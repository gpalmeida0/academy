# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        options:
          - Test
          - Int
          - E2E
          - Prod
env:
  docker_image_name: 'academy-custom-v2'
  docker_tag_name: 'chentric'
  artifact_name: 'my-artifact'
jobs:
  build:

    runs-on: ubuntu-latest


    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: academy
          POSTGRES_USER: academy
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432


    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      uses: ./.github/actions/maven_build
    - name: Create new Docker Image
      uses: ./.github/actions/docker_build
      with:
        image_name: $docker_image_name
        tag_name: $docker_tag_name
    - name: Save Docker image to a file
      run: docker save -o "${{env.docker_image_name}}.tar"  $docker_image_name:$docker_tag_name
    - uses: actions/upload-artifact@v4
      with:
        name: ${{env.artifact_name}}
        path: '${{env.docker_image_name}}.tar'
  docker-images:


    runs-on: ubuntu-latest

    environment: ${{inputs.environment}}
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: ${{env.artifact_name}}
    - name: 'Load Docker image'
      run: docker load -i "${{env.docker_image_name}}.tar"
    - uses: actions/checkout@v4
    - name: List Docker Images
      run: docker image ls
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: 'Docker push'
      uses: ./.github/actions/docker_push
      with:
        docker_image_reference: ${{env.docker_image_name}}:${{env.docker_tag_name}}
        docker_username: ${{secrets.DOCKERHUB_USERNAME}}
    needs: build
